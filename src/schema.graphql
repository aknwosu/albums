schema {
	query: Query
	mutation: Mutation
}

type Mentee implements Node, Timestamped {
	menteeChat(
		where: MenteeMentorChatXrefWhereArgs
		orderBy: MenteeMentorChatXrefOrderByArgs
		first: Int
		after: String
		last: Int
		before: String
	): MenteeMentorChatXrefConnection
	name: String
	modifiedAt: DateTime!
	id: ID!
	associated_org_id: Int
	avatar: String
	createdAt: DateTime!
	mentee_id: Int
}

type MenteeMentorChatXrefConnection {
	edges: [MenteeMentorChatXrefEdge]
	pageInfo: PageInfo!
	aggregations: MenteeMentorChatXrefAggregations
}

type MenteeMentorChatXrefEdge {
	node: MenteeMentorChatXref!
	cursor: String!
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
}

type MenteeMentorChatXrefAggregations {
	count: Int
	avg: MenteeMentorChatXrefAggregationsAvg
	sum: MenteeMentorChatXrefAggregationsSum
	min: MenteeMentorChatXrefAggregationsMin
	max: MenteeMentorChatXrefAggregationsMax
}

type MenteeMentorChatXrefAggregationsAvg {
	status: Float
	childQuestionId: Float
}

type MenteeMentorChatXrefAggregationsSum {
	status: Int
	childQuestionId: Int
}

type MenteeMentorChatXrefAggregationsMin {
	modifiedAt: DateTime
	createdAt: DateTime
	status: Int
	childQuestionId: Int
	status_updated_by: String
}

type MenteeMentorChatXrefAggregationsMax {
	modifiedAt: DateTime
	createdAt: DateTime
	status: Int
	childQuestionId: Int
	status_updated_by: String
}

interface Node {
	id: ID!
	possibleTypes: possibleUnionTypes
}

union possibleUnionTypes =
	  MenteeMentorChatXref
	| Mentor
	| Mentee
	| MenteeMentorChat
	| File
	| Role
	| User
	| Viewer
	| RequestLog
	| Schema
	| Type
	| Field
	| Permission

interface Timestamped {
	createdAt: DateTime!
	modifiedAt: DateTime!
	possibleTypes: timeStampedPossibleTypes
}

union timeStampedPossibleTypes =
	  MenteeMentorChatXref
	| Mentor
	| Mentee
	| MenteeMentorChat
	| File
	| Role
	| User
	| UserRoles

type Mentor {
	modifiedAt: DateTime!
	name: String
	associated_org_id: Int
	mentorChat(
		where: MenteeMentorChatXrefWhereArgs
		orderBy: [MenteeMentorChatXrefOrderByArgs]
		first: Int
		after: String
		last: Int
		before: String
	): MenteeMentorChatXrefConnection
	mentor_id: Int
	id: ID!
	createdAt: DateTime!
	avatar: String
}

input MenteeMentorChatXrefWhereArgs {
	modifiedAt: MenteeMentorChatXrefModifiedAtWhereArgs
	status: MenteeMentorChatXrefStatusWhereArgs
	mentor: MentorWhereArgs
	id: MenteeMentorChatXrefIdWhereArgs
	createdAt: MenteeMentorChatXrefCreatedAtWhereArgs
	status_updated_by: MenteeMentorChatXrefStatusUpdatedByWhereArgs
	childQuestionId: MenteeMentorChatXrefChildQuestionIdWhereArgs
	mentee: MenteeWhereArgs
	chatXref: MenteeMentorChatWhereArgs
	mentorId: MenteeMentorChatXrefMentorIdWhereArgs
	menteeId: MenteeMentorChatXrefMenteeIdWhereArgs
	OR: [MenteeMentorChatXrefWhereArgs]
	AND: [MenteeMentorChatXrefWhereArgs]
}

input MenteeMentorChatXrefModifiedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input vMenteeMentorChatXrefStatusWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorWhereArgs {
	modifiedAt: MentorModifiedAtWhereArgs
	name: MentorNameWhereArgs
	associated_org_id: MentorAssociatedOrgIdWhereArgs
	mentorChat: MenteeMentorChatXrefWhereArgs
	mentor_id: MentorMentorIdWhereArgs
	id: MentorIdWhereArgs
	createdAt: MentorCreatedAtWhereArgs
	avatar: MentorAvatarWhereArgs
	OR: [MentorWhereArgs]
	AND: [MentorWhereArgs]
}

input MenteeMentorChatXrefIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeMentorChatXrefCreatedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatXrefStatusUpdatedByWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatXrefChildQuestionIdWhereArgs {
	eq: Int
	ne: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeWhereArgs {
	menteeChat: MenteeMentorChatXrefWhereArgs
	name: MenteeNameWhereArgs
	modifiedAt: MenteeModifiedAtWhereArgs
	id: MenteeIdWhereArgs
	associated_org_id: MenteeAssociatedOrgIdWhereArgs
	avatar: MenteeAvatarWhereArgs
	createdAt: MenteeCreatedAtWhereArgs
	mentee_id: MenteeMenteeIdWhereArgs
	OR: [MenteeWhereArgs]
	AND: [MenteeWhereArgs]
}

input MenteeMentorChatWhereArgs {
	id: MenteeMentorChatIdWhereArgs
	chatXref: MenteeMentorChatXrefWhereArgs
	modifiedAt: MenteeMentorChatModifiedAtWhereArgs
	from: MenteeMentorChatFromWhereArgs
	createdAt: MenteeMentorChatCreatedAtWhereArgs
	content: MenteeMentorChatContentWhereArgs
	chatXrefId: MenteeMentorChatChatXrefIdWhereArgs
	OR: [MenteeMentorChatWhereArgs]
	AND: [MenteeMentorChatWhereArgs]
}

input MenteeMentorChatXrefMentorIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeMentorChatXrefMenteeIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeMentorChatXrefOrderByArgs {
	field: MenteeMentorChatXrefOrderByField
	direction: OrderByDirection
}

input MentorModifiedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorNameWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorAssociatedOrgIdWhereArgs {
	eq: Int
	ne: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorMentorIdWhereArgs {
	eq: Int
	ne: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MentorCreatedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MentorAvatarWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

enum MenteeMentorChatXrefOrderByField {
	modifiedAt
	status
	id
	createdAt
	status_updated_by
	childQuestionId
}

enum OrderByDirection {
	ASC
	DESC
}

enum MenteeMentorChatOrderByField {
	id
	modifiedAt
	from
	createdAt
	content
}

input MenteeNameWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeModifiedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeAssociatedOrgIdWhereArgs {
	eq: Int
	ne: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeAvatarWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeCreatedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMenteeIdWhereArgs {
	eq: Int
	ne: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	between: [Int]
	notBetween: [Int]
	in: [Int]
	notIn: [Int]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeMentorChatModifiedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatFromWhereArgs {
	eq: String
	ne: String
	gt: String
	gte: String
	lt: String
	lte: String
	between: [String]
	notBetween: [String]
	in: [String]
	notIn: [String]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatCreatedAtWhereArgs {
	eq: DateTime
	ne: DateTime
	gt: DateTime
	gte: DateTime
	lt: DateTime
	lte: DateTime
	between: [DateTime]
	notBetween: [DateTime]
	in: [DateTime]
	notIn: [DateTime]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatContentWhereArgs {
	eq: Text
	ne: Text
	gt: Text
	gte: Text
	lt: Text
	lte: Text
	between: [Text]
	notBetween: [Text]
	in: [Text]
	notIn: [Text]
	like: String
	notLike: String
	isNull: Boolean
}

input MenteeMentorChatChatXrefIdWhereArgs {
	eq: ID
	ne: ID
	in: [ID]
	notIn: [ID]
	isNull: Boolean
}

input MenteeMentorChatOrderByArgs {
	field: MenteeMentorChatOrderByField
	direction: OrderByDirection
}

type MenteeMentorChatConnection {
	edges: [MenteeMentorChatEdge]
	pageInfo: PageInfo!
	aggregations: MenteeMentorChatAggregations
}

type MenteeMentorChatEdge {
	node: MenteeMentorChat
	cursor: String!
}

type MenteeMentorChatAggregations {
	count: Int
	min: MenteeMentorChatAggregationsMin
	max: MenteeMentorChatAggregationsMax
}

type MenteeMentorChat implements Node, Timestamped {
	id: ID!
	chatXref: MenteeMentorChatXref
	modifiedAt: DateTime
	from: String
	createdAt: DateTime!
	content: Text
}

type MenteeMentorChatAggregationsMin {
	modifiedAt: DateTime
	createdAt: DateTime
	from: String
	content: Text
}

type MenteeMentorChatAggregationsMax {
	modifiedAt: DateTime
	createdAt: DateTime
	from: String
	content: Text
}

type MenteeMentorChatXref implements Node, Timestamped {
	modifiedAt: DateTime!
	status: Int
	mentor: Mentor
	id: ID!
	createdAt: DateTime!
	status_updated_by: String
	childQuestionId: Int
	mentee: Mentee
	chatXref(
		where: MenteeMentorChatWhereArgs
		orderBy: MenteeMentorChatOrderByArgs
		first: Int
		after: Int
		last: Int
		before: String
	): MenteeMentorChatConnection
}
